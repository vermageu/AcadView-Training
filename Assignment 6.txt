#Q1. Create a function to calculate area of circle
def area_circle(r):
    """
    This is a function to create area of circle
    Variables
    ---------
    r   : It is a float type argument which stores value of radius of the circle
    area: It is a float type variable storing the result of pi*(radius)^2
    Returns
    ---------
    This function returns the value of 'area' variable
    Testing
    ---------
    >>rad=21.2
    >>area_circle(rad)
    >>area
    1411.24
    """
    area = 3.14*r*r
    return area
#Driving code
rad = float(input("Enter radius: "))
area = area_circle(rad)
print("\nArea of circle of radius %.2f unit(s): %.2f sq.units"%(rad,area))


#Q2. Find perfect numbers between 
def isPerfect( n ):
    """
    This is a function to check whether a number is perfect
    Variables
    ---------
    n   : It is an integer type argument which stores value of number between 1 to 1000
    sum : Caculates the sum of factors 
    i   : It is an iterator to increment and check a factor by 1
    Returns
    ---------
    This function returns boolean True if sum equals n else returns False
    """
    sum = 1
    i = 2
    while i * i <= n:
        if n % i == 0:
            sum = sum + i + n/i
        i += 1
    if (sum == n):
        return True
    else:
        return False
#Driving code    
print("Perfect numbers from 1 to 1000:")
n = 2
for n in range (1001):
    if isPerfect (n):
        print(n , " is a perfect number")
        
#Q3. Table of 12 using recursion
def table(num,i):
    """        
    This is a function to print multiplication of 12 (or any other number passed)
    Variables
    ---------
    num   : It is an integer type argument which stores 12
    i     : It is an integer argument storing the iterator of multipliaction table
    Returns
    ---------
    This function returns itself with an updated value of i variable untill i exceeds 20. 
    If i exceeds the flow is returned to the driving program back 
    """
    if i>20:
        return 0        
    else:
        print("%d x %d = %d"%(num,i,num*i)) #Print multiplication as number x iterator
        i += 1
        return table(num,i)
#Driving code    
table(12,1)

#Q4. Find power of a number using user defined function
def powers(num,power):
    """        
    This is a function to calculate power of a given number
    Variables
    ---------
    num   : It is an integer type argument which stores number
    power : It is an integer type argument that stores the exponential value or power
    Returns
    ---------
    This function returns itself with a unit decremented value of power untill power equals 1. 
    If power becomes 0, the flow is returned to the driving program back 
    """
    if power == 0:
        return 1
    if power >= 1:
        return num * powers(num, power - 1) #Recursive call
#Driving Code
num = int(input("Enter number: "))
power = int(input("\nEnter power: "))
print("\nResult: %d"%(powers(num,power)))

#Q5. Calculate factorial using recursion & store factorials in dictionary
def factorial(number):
    """        
    This is a function to calculate factorial
    Variables
    ---------
    number   : It is an integer type argument which stores number whose factorial is to be calculated
    Returns
    ---------
    This function returns itself with a unit decremented value of factorial untill number equals 0. 
    If number becomes 0, the flow is returned to the driving program back 
    Testing
    ---------
    >>factorial(6)
    returns 720
    >>number=10
    >>val = factorial(num)
    >>val
    3628800
    """    
    if number == 0:        
        return 1
    else:        
        return number * factorial(number-1)
#Driving code
dictionary = {}   
tc = int(input("Enter number of test cases: "))
for j in range(tc):
    number = int(input("Enter number: "))
    val = factorial(number)
    dictionary[number] = val
print(dictionary)